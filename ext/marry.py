from re import compile
from utils.db import add_marriage, get_marriages, is_married, divorce
from aiogram import F, types, Router
from utils.constants import MARRIAGE, private, STATUS_MARRY

marry = Router(name='–ë—Ä–∞—á–Ω–∞—è —á–∞—Å—Ç—å')

@marry.message(F.text.lower().startswith("–±—Ä–∞–∫–∏"))
async def marries_list(message: types.Message):
    marries, chat, total_text = dict(), message.chat, ['<b>–ë—Ä–∞–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:</b>\n']
    for uid1, uid2, hours in (await get_marriages(chat.id)):
        user, propose = (await chat.get_member(int(uid1))).user, (await chat.get_member(int(uid2))).user
        status = STATUS_MARRY(hours)
        if status not in marries:
            marries[status] = [f'{user.mention_html(user.first_name)} + {propose.mention_html(propose.first_name)} ({hours // 24} –¥–Ω –∏ {hours % 24} —á)']
            continue
        marries[status].append(f'{user.mention_html(user.first_name)} + {propose.mention_html(propose.first_name)} ({hours // 24} –¥–Ω –∏ {hours % 24} —á)')
    if len(marries) == 0:
        return await message.reply('\n'.join(total_text + ['–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç üíî', '–û—Ç–≤–µ—á–∞–π—Ç–µ –∫–æ–º—É-–ª–∏–±–æ "–ü–æ–∂–µ–Ω–∏—Ç—å" –∏ –∂–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞']))
    for status, text in marries.items():
        total_text.extend([f'<b>{status}</b>'] + text)
    await message.reply('\n'.join(total_text))

@marry.message(F.text.lower().startswith("—Ä–∞–∑–≤–æ–¥"))
async def divorce_command(message: types.Message):
    if await is_married(uid := message.from_user.id):
        await divorce(uid)
        return await message.reply("–í–∞—à–∞ –ø–∞—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ–¥–µ–Ω–∞!")
    await message.reply("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ!")

@marry.message(F.text.lower().regexp('(–±—Ä–∞–∫|–ø–æ–∂–µ–Ω–∏—Ç—å|–ø–æ–∂–µ–Ω–∏—Ç—Å—è)+'))
async def marry_command(message: types.Message):
    if message.reply_to_message is None:
        return await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ —Ç–æ–º—É —Å –∫–µ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ–Ω–∏—Ç—Å—è!")
    user, propose = message.from_user, message.reply_to_message.from_user
    if user == propose:
       return await message.reply("–°–∞–º–æ–ª—é–±–∏–µ ‚Äî —ç—Ç–æ –Ω–∞—à–∞ –ø–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —è–ª—é–±–æ–≤—å\n¬© <b>–û. –£–∞–π–ª—å–¥</b>")
    elif propose.is_bot:
        await message.reply("–ù–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø–æ–¥–∞—Ä–∏—Ç—å –∫—É–∫–ª–∞–º –¥—É—à–∏ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –¥–æ–±–∏—Ç—å—Å—è —Å—Ö–æ–∂–µ—Å—Ç–∏ —Å –ª—é–¥—å–º–∏. –ö–∞–∫–æ–π –±—ã –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–π –Ω–∏ –±—ã–ª–∞ –∫—É–∫–ª–∞, —ç—Ç–æ –ª–∏—à—å –∏–º–∏—Ç–∞—Ü–∏—è, –æ–±–æ–ª–æ—á–∫–∞ –±–µ–∑ –¥—É—à–∏.\n<b>¬© –ü—Ä–∏–∑—Ä–∞–∫ –≤ –¥–æ—Å–ø–µ—Ö–∞—Ö 2: –ù–µ–≤–∏–Ω–Ω–æ—Å—Ç—å (Ghost in the Shell 2: Innocence)</b>")
        # TODO
        # return
    await message.reply(f"<b>{propose.mention_html(propose.first_name)}</b>, –≤–Ω–∏–º–∞–Ω–∏–µ!\n<b>{user.mention_html(user.first_name)}</b> —Å–¥–µ–ª–∞–ª(–∞) –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞!", reply_markup=MARRIAGE(user.id, propose.id))


@marry.callback_query(F.data.regexp(compile(r'(accept|decline)_(\d+)_(\d+)')))
@private
async def button_response(call: types.CallbackQuery):
    do, uid1, uid2 = call.data.split("_")
    user, propose = (await call.message.chat.get_member(int(uid1))).user, (await call.message.chat.get_member(int(uid2))).user
    user_ment, prop_ment = propose.mention_html(propose.first_name)
    
    if call.message.chat.type not in ('group', 'supergroup'):
        return await call.message.reply("–ù–µ–ª—å–∑—è –∂–µ–Ω–∏—Ç—Å—è –≤ –õ–°!")
    if None in (user, propose):
        return await call.message.reply("–î–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —á–∞—Ç–µ!")

    if await is_married(uid1):
        return await call.message.reply(f"{user_ment} –≤—ã —É–∂–µ –≤ –±—Ä–∞–∫–µ!")
    elif await is_married(uid2):
        return await call.message.reply(f"{user_ment} —Å–æ–∂–∞–ª–µ–µ–º, –Ω–æ {prop_ment} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –±—Ä–∞–∫–µ!")

    if do == "decline":
        await call.message.edit_text(f'{prop_ment} –æ—Ç–∫–ª–æ–Ω–∏–ª(–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {user_ment}', reply_markup=None)
    else:
        await call.message.edit_text(f'{prop_ment} –ø—Ä–∏–Ω—è–ª(–∞) –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {user_ment}!\n–ü–æ–∑–¥—Ä–∞–≤–¥—è–µ–º!', reply_markup=None)
        await add_marriage(uid1, uid2, call.message.chat.id)
